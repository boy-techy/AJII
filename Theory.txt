
Q.3 Explain difference between Bind and Call (example).
	Bind returns a new function.Call execute the current function immediatly.

			----BIND----
	this.x = 9;    // this refers to global "window" object here in the browser
var module = {
  x: 81,
  getX: function() { return this.x; }
};
module.getX(); // 81
var retrieveX = module.getX;
retrieveX();    // returns 9
var boundGetX = retrieveX.bind(module);
boundGetX(); // 81

                        -----CALL-------

	function Product(name, price) {
      this.name = name;
      this.price = price;

      if (price < 0) {
        throw RangeError('Cannot create product ' +
                          this.name + ' with a negative price');
      }
    }

    function Food(name, price) {
      Product.call(this, name, price);
      this.category = 'food';
    }

    function Toy(name, price) {
      Product.call(this, name, price);
      this.category = 'toy';
    }

    var cheese = new Food('feta', 5);
    var fun = new Toy('robot', 40);



Q4. Explain 3 properties of argument object.

	The arguments object is not an Array. It is similar to an Array, but does not have any Array properties except length. For example, it does not have the pop method. However it can be converted to a real Array:
	var args = Array.prototype.slice.call(arguments);
	var args = [].slice.call(arguments);
You can use the arguments object if you call a function with more arguments than it is formally declared to accept.
The arguments object is a local variable available within all functions. You can refer to a function's arguments within the function by using the arguments object.
